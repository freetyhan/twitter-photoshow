
# -*- coding: utf-8 -*-
"""run script for image conversion

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JmBHfd0-wD0av8ylsfGTuBNxgl935NKM
"""

#!pip install mysql-connector-python

import shlex
import requests
import os
import shutil
import time

def main():

    print("START: database image download")
    import mysql.connector
    mydb = mysql.connector.connect(
        host='137.184.230.178', database='photo_gallery', user='aks', password='123', autocommit=True)

    mycursor = mydb.cursor()

    mycursor.execute("SELECT * FROM tweets WHERE deleted = 0 AND censored = 0")

    tweets = mycursor.fetchall()

    tweets

    mycursor = mydb.cursor()
    mycursor.execute("DESCRIBE configuration")
    r = mycursor.fetchall()
    r

    mycursor.execute("SELECT * FROM configuration")
    config = mycursor.fetchall()
    config = config[0]
    # print(config)
    config_colour = "#" + hex(config[1])[2:]
    # print(config_colour)
    config_show_twitter_name = config[2]
    config_show_username = config[3]
    config_show_caption = config[4]
    config_show_dish_name = config[5]
    config_transition_effect = config[6]

    #conver transition effect to  number
    if config_transition_effect == "random":
        config_transition_effect = 0
    elif config_transition_effect == "fade":
        config_transition_effect = 1
    elif config_transition_effect == "panning":
        config_transition_effect = 2
    

    directory = 't_img'
    if not os.path.exists(directory):
        os.makedirs(directory)
    else:
        shutil.rmtree(directory)
        os.makedirs(directory)

    directory_updated = 'updated_img'
    if os.path.exists(directory_updated):
        shutil.rmtree(directory_updated)
        os.makedirs(directory_updated)
    else:
        os.makedirs(directory_updated)

    for i in tweets:
        image_url = i[-4]
        image_name = i[0]
        img_data = requests.get(image_url).content
        with open(directory + "/" + image_name, 'wb') as handler:
            handler.write(img_data)

    print("DONE: database image download")

    print("START: Conversion to embedded image")
    filenames = ""
    for i in tweets:
        img_name = i[0]
        img_username = ''
        img_handle = ''
        img_caption = ''
        img_dishname = ''

        if config_show_username:
            img_username = shlex.quote(i[3])
        if config_show_twitter_name:
            img_handle = shlex.quote("@" + i[4])
        if config_show_caption:
            img_caption = shlex.quote(i[5])
        if config_show_dish_name:
            img_dishname = shlex.quote(i[7])
        cmd = f"./script.sh {directory+ '/' +img_name} { directory_updated + '/' + img_name} {img_username} {img_handle} {img_caption} {img_dishname} '{config_colour}'"
        print(cmd)
        filenames += f"{img_name}.c\r\n"
        # print(cmd)

        os.system(cmd)
    #Write a config file into the directory
    with open(f"{directory_updated}/config.txt",'w') as  handler:
        handler.write(f"{config_colour}\r\n{config_transition_effect}\r\n{len(tweets)}\r\n{filenames}")


    if os.path.exists(f"{directory_updated}.zip"):
        os.remove(f"{directory_updated}.zip")
   
    time.sleep(5)
    zip_cmd = f"zip -r {directory_updated}.zip {directory_updated} -i '*.c' '*.txt'"
    os.system(zip_cmd)

    print("DONE: Conversion to embedded image")


if __name__ == "__main__":
    main()
